// <auto-generated />
using System;
using DocumentUploadFile.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentUploadFile.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221007053921_initilze")]
    partial class initilze
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1);

            modelBuilder.Entity("DocumentUploadFile.Models.Domain.Document_files", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1);

                    b.Property<int?>("Document_ID")
                        .HasColumnType("int");

                    b.Property<string>("File_path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("isEnabled")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("Document_ID");

                    b.ToTable("Document_files", "Document");
                });

            modelBuilder.Entity("DocumentUploadFile.Models.Domain.documents", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Due_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("isEnabled")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("documents", "Document");
                });

            modelBuilder.Entity("DocumentUploadFile.Models.Domain.Priority", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("isEnabled")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Priority", "Document");
                });

            modelBuilder.Entity("DocumentUploadFile.Models.Domain.Document_files", b =>
                {
                    b.HasOne("DocumentUploadFile.Models.Domain.documents", "documents")
                        .WithMany("Document_files")
                        .HasForeignKey("Document_ID");

                    b.Navigation("documents");
                });

            modelBuilder.Entity("DocumentUploadFile.Models.Domain.documents", b =>
                {
                    b.Navigation("Document_files");
                });
#pragma warning restore 612, 618
        }
    }
}
